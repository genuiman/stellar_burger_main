/// <reference types="react" />
declare const _default: {
    decorators: ((...args: any) => any)[];
};
export default _default;
export declare const RenderChildren: {
    render: () => JSX.Element;
};
export declare const RenderChildrenWithStoryArgs: {
    render: ({ id }: {
        id: string;
    }) => JSX.Element;
    args: {
        id: string;
    };
};
export declare const SpecificPath: {
    render: () => JSX.Element;
    parameters: {
        reactRouter: {
            routePath: string;
        };
    };
};
export declare const RouteParams: {
    render: () => JSX.Element;
    parameters: {
        reactRouter: {
            routePath: string;
            routeParams: {
                id: string;
            };
        };
    };
};
export declare const SearchParams: {
    render: () => JSX.Element;
    parameters: {
        reactRouter: {
            searchParams: {
                page: string;
            };
        };
    };
};
export declare const MatchesHandles: {
    render: () => JSX.Element;
    parameters: {
        reactRouter: {
            routeHandle: string;
        };
    };
};
export declare const MatchesHandlesInsideOutlet: {
    render: () => JSX.Element;
    parameters: {
        reactRouter: {
            routeHandle: string;
            outlet: {
                handle: string;
                element: JSX.Element;
            };
        };
    };
};
export declare const OutletJSX: {
    render: () => JSX.Element;
    parameters: {
        reactRouter: {
            outlet: JSX.Element;
        };
    };
};
export declare const OutletConfigObject: {
    render: () => JSX.Element;
    parameters: {
        reactRouter: {
            outlet: {
                element: JSX.Element;
            };
        };
    };
};
