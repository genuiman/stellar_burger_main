function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
import React, { useEffect, useLayoutEffect, useRef, useState } from "react";
import { useLocation } from "react-router-dom";
import { addons } from '@storybook/addons';
import { EVENTS } from "../constants";
import { useNavigationEventBuilder } from "../hooks/useNavigationEventBuilder";
import { useDeepRouteMatches } from "../hooks/useDeepRouteMatches";
import { defer } from "../utils";
export var RouterLogger = function RouterLogger(_ref) {
  var children = _ref.children;
  var channel = addons.getChannel();
  var location = useLocation();
  var _useState = useState(),
    _useState2 = _slicedToArray(_useState, 2),
    loadedAt = _useState2[0],
    setLoadedAt = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    loadedEventEmitted = _useState4[0],
    setLoadedEventEmitted = _useState4[1];
  var _useState5 = useState([]),
    _useState6 = _slicedToArray(_useState5, 2),
    lastEmittedRouteMatches = _useState6[0],
    setLastEmittedRouteMatches = _useState6[1];
  var buildEventData = useNavigationEventBuilder();
  var matches = useDeepRouteMatches();
  var storyLoadedEmitted = useRef(defer());
  useLayoutEffect(function () {
    setLoadedAt(location);
  });
  useEffect(function () {
    if (loadedEventEmitted) storyLoadedEmitted.current.resolve();
  }, [loadedEventEmitted]);
  useEffect(function () {
    setLastEmittedRouteMatches(matches);
    var id = setTimeout(function () {
      if (!loadedEventEmitted) {
        setLoadedEventEmitted(true);
        channel.emit(EVENTS.STORY_LOADED, buildEventData(EVENTS.STORY_LOADED));
      }
    }, 0);
    return function () {
      return clearTimeout(id);
    };
  }, [loadedEventEmitted, matches]);
  useEffect(function () {
    if (loadedAt !== undefined && loadedAt.key !== location.key) {
      storyLoadedEmitted.current.promise.then(function () {
        channel.emit(EVENTS.NAVIGATION, buildEventData(EVENTS.NAVIGATION));
      });
    }
  }, [location]);
  useEffect(function () {
    if (loadedEventEmitted && matches.length > lastEmittedRouteMatches.length) {
      setLastEmittedRouteMatches(matches);
      channel.emit(EVENTS.ROUTE_MATCHES, buildEventData(EVENTS.ROUTE_MATCHES));
    }
  }, [matches]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, children);
};