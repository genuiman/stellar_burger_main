"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNavigationEventBuilder = void 0;
var _constants = require("../constants");
var _reactRouterDom = require("react-router-dom");
var _useCurrentUrl = require("./useCurrentUrl");
var _useDeepRouteMatches = require("./useDeepRouteMatches");
var _react = require("react");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) { ; } } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var useNavigationEventBuilder = function useNavigationEventBuilder() {
  var eventCount = (0, _react.useRef)(0);
  var location = (0, _reactRouterDom.useLocation)();
  var params = (0, _reactRouterDom.useParams)();
  var _useSearchParams = (0, _reactRouterDom.useSearchParams)(),
    _useSearchParams2 = _slicedToArray(_useSearchParams, 1),
    search = _useSearchParams2[0];
  var navigationType = (0, _reactRouterDom.useNavigationType)();
  var matches = (0, _useDeepRouteMatches.useDeepRouteMatches)();
  var searchParams = {};
  search.forEach(function (value, key) {
    searchParams[key] = value;
  });
  var currentUrl = (0, _useCurrentUrl.useCurrentUrl)();
  var matchesData = matches.map(function (routeMatch) {
    return [routeMatch.route.path, routeMatch.params];
  });
  return function (eventName) {
    switch (eventName) {
      case _constants.EVENTS.STORY_LOADED:
        {
          var eventData = {
            url: currentUrl,
            path: location.pathname,
            routeParams: params,
            searchParams: searchParams,
            routeMatches: matchesData,
            hash: location.hash,
            routeState: location.state
          };
          return {
            key: "".concat(_constants.EVENTS.STORY_LOADED, "_").concat(eventCount.current++),
            type: _constants.EVENTS.STORY_LOADED,
            data: eventData
          };
        }
      case _constants.EVENTS.NAVIGATION:
        {
          var _eventData = {
            url: currentUrl,
            path: location.pathname,
            routeParams: params,
            searchParams: searchParams,
            hash: location.hash,
            routeState: location.state,
            routeMatches: matchesData,
            navigationType: navigationType
          };
          return {
            key: "".concat(_constants.EVENTS.NAVIGATION, "_").concat(eventCount.current++),
            type: _constants.EVENTS.NAVIGATION,
            data: _eventData
          };
        }
      case _constants.EVENTS.ROUTE_MATCHES:
        {
          return {
            key: "".concat(_constants.EVENTS.ROUTE_MATCHES, "_").concat(eventCount.current++),
            type: _constants.EVENTS.ROUTE_MATCHES,
            data: {
              matches: matchesData
            }
          };
        }
    }
  };
};
exports.useNavigationEventBuilder = useNavigationEventBuilder;