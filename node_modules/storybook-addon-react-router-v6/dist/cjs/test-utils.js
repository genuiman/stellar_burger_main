"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LocalStorage = void 0;
exports.mockLocalStorage = mockLocalStorage;
var _vitest = require("vitest");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var LocalStorage = /*#__PURE__*/function () {
  function LocalStorage(vi) {
    var _this = this;
    _classCallCheck(this, LocalStorage);
    Object.defineProperty(this, 'store', {
      enumerable: false,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, 'getItem', {
      enumerable: false,
      value: vi.fn(function (key) {
        return _this.store[key] !== undefined ? _this.store[key] : null;
      })
    });
    Object.defineProperty(this, 'setItem', {
      enumerable: false,
      // not mentioned in the spec, but we must always coerce to a string
      value: vi.fn(function (key) {
        var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        _this.store[key] = val + '';
      })
    });
    Object.defineProperty(this, 'removeItem', {
      enumerable: false,
      value: vi.fn(function (key) {
        delete _this.store[key];
      })
    });
    Object.defineProperty(this, 'clear', {
      enumerable: false,
      value: vi.fn(function () {
        Object.keys(_this.store).map(function (key) {
          return delete _this.store[key];
        });
      })
    });
    Object.defineProperty(this, 'toString', {
      enumerable: false,
      value: vi.fn(function () {
        return '[object Storage]';
      })
    });
    Object.defineProperty(this, 'key', {
      enumerable: false,
      value: vi.fn(function (idx) {
        return Object.keys(_this.store)[idx] || null;
      })
    });
  } // end constructor
  _createClass(LocalStorage, [{
    key: "length",
    get: function get() {
      return Object.keys(this.store).length;
    }
    // for backwards compatibility
  }, {
    key: "__STORE__",
    get: function get() {
      return this.store;
    }
  }]);
  return LocalStorage;
}();
exports.LocalStorage = LocalStorage;
function mockLocalStorage() {
  if (!(window.localStorage instanceof LocalStorage)) {
    _vitest.vi.stubGlobal("localStorage", new LocalStorage(_vitest.vi));
    _vitest.vi.stubGlobal("sessionStorage", new LocalStorage(_vitest.vi));
  }
}